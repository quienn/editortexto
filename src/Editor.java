
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.Copies;
import javax.print.attribute.standard.MediaSizeName;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author quien
 */
public class Editor extends javax.swing.JFrame {

    String frameTitle = "Sin título";
    File currentFile;

    FontFrame fontFrame;

    private javax.swing.JTabbedPane tabbedPane; //este es el contenedor de espestañas compañeritosssssssssssssssssss

    /**
     * Creates new form Editor
     */
    public Editor() {
        initComponents();
        setTitle(frameTitle);
        fontFrame = new FontFrame(textArea);
        tabbedPane = new javax.swing.JTabbedPane();
        editorContainer.setViewportView(tabbedPane);
    }

    private void addNewTab() {
        JScrollPane newScrollPane = new JScrollPane();
        JTextArea newTextArea = new JTextArea();
        newScrollPane.setViewportView(newTextArea);
        tabbedPane.addTab("Nueva pestaña", newScrollPane);
    }

    public void paperPrint() {
        try {
            DocFlavor format = DocFlavor.INPUT_STREAM.AUTOSENSE;
            Doc doc
                    = new SimpleDoc(new ByteArrayInputStream(textArea.getText().getBytes()), format, null);
            PrintRequestAttributeSet aset = new HashPrintRequestAttributeSet();

            aset.add(MediaSizeName.NA_LETTER);
            aset.add(new Copies(1));

            PrintService service = PrintServiceLookup.lookupDefaultPrintService();
            System.out.println(service);
            DocPrintJob job = service.createPrintJob();
            job.print(doc, aset);
        } catch (Exception e) {

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editorContainer = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        menu = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuFileNew = new javax.swing.JMenuItem();
        menuFileWindow = new javax.swing.JMenuItem();
        menuFileOpen = new javax.swing.JMenuItem();
        menuFileSave = new javax.swing.JMenuItem();
        menuFileSaveAs = new javax.swing.JMenuItem();
        menuFileSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuFileSettings = new javax.swing.JMenuItem();
        menuFilePrint = new javax.swing.JMenuItem();
        menuFileSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuFileExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        menuFormat = new javax.swing.JMenu();
        menuFont = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editorContainer.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        textArea.setColumns(20);
        textArea.setRows(5);
        editorContainer.setViewportView(textArea);

        menuFile.setMnemonic('A');
        menuFile.setText("File");

        menuFileNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileNew.setText("Nuevo");
        menuFileNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileNewActionPerformed(evt);
            }
        });
        menuFile.add(menuFileNew);

        menuFileWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileWindow.setText("Ventana nueva");
        menuFileWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileWindowActionPerformed(evt);
            }
        });
        menuFile.add(menuFileWindow);

        menuFileOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileOpen.setText("Abrir...");
        menuFileOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuFileOpen);

        menuFileSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileSave.setText("Guardar");
        menuFileSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuFileSave);

        menuFileSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileSaveAs.setText("Guardar como...");
        menuFileSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(menuFileSaveAs);
        menuFile.add(menuFileSeparator1);

        menuFileSettings.setText("Configurar página");
        menuFile.add(menuFileSettings);

        menuFilePrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFilePrint.setText("Imprimir");
        menuFilePrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFilePrintActionPerformed(evt);
            }
        });
        menuFile.add(menuFilePrint);
        menuFile.add(menuFileSeparator2);

        menuFileExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menuFileExit.setText("Salir");
        menuFileExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFileExitActionPerformed(evt);
            }
        });
        menuFile.add(menuFileExit);

        menu.add(menuFile);

        menuEdit.setMnemonic('E');
        menuEdit.setText("Edit");
        menu.add(menuEdit);

        menuFormat.setMnemonic('F');
        menuFormat.setText("Formato");

        menuFont.setText("Fuente...");
        menuFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFontActionPerformed(evt);
            }
        });
        menuFormat.add(menuFont);

        menu.add(menuFormat);

        menuView.setMnemonic('V');
        menuView.setText("View");
        menu.add(menuView);

        menuHelp.setMnemonic('Y');
        menuHelp.setText("Ayuda");
        menu.add(menuHelp);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(editorContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuFileNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileNewActionPerformed
        addNewTab();
    }//GEN-LAST:event_menuFileNewActionPerformed

    private void menuFileSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileSaveActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo...");

        if (currentFile == null) {
            if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                currentFile = fileChooser.getSelectedFile();

                try (FileWriter fileWriter = new FileWriter(currentFile);) {
                    fileWriter.write(textArea.getText());
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "No se pudo guardar el texto en el archivo especificado.", "Error de archivo", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            try (FileWriter fileWriter = new FileWriter(currentFile);) {
                fileWriter.write(textArea.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo guardar el texto en el archivo especificado.", "Error de archivo", JOptionPane.ERROR_MESSAGE);
            }
        }

        this.setTitle(currentFile.getName());
    }//GEN-LAST:event_menuFileSaveActionPerformed

    private void menuFileExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileExitActionPerformed
        dispose();
    }//GEN-LAST:event_menuFileExitActionPerformed

    private void menuFileSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileSaveAsActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar archivo como...");

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();

            try (FileWriter fileWriter = new FileWriter(currentFile);) {
                fileWriter.write(textArea.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "No se pudo guardar el texto en el archivo especificado.", "Error de archivo", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuFileSaveAsActionPerformed

    private void menuFileOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Abrir archivo...");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            currentFile = fileChooser.getSelectedFile();

            Path path = Paths.get(currentFile.getPath());

            try (Stream<String> lines = Files.lines(path);) {
                String data = lines.collect(Collectors.joining("\n"));

                textArea.setText(data);
                lines.close();
            } catch (Exception e) {
            }

            this.setTitle(currentFile.getName());
        }
    }//GEN-LAST:event_menuFileOpenActionPerformed

    private void menuFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFontActionPerformed
        fontFrame.setVisible(true);
    }//GEN-LAST:event_menuFontActionPerformed

    private void menuFilePrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFilePrintActionPerformed
        paperPrint();
    }//GEN-LAST:event_menuFilePrintActionPerformed

    private void menuFileWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFileWindowActionPerformed
        Editor newEditor = new Editor();
        newEditor.setVisible(true);
    }//GEN-LAST:event_menuFileWindowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane editorContainer;
    private javax.swing.JMenuBar menu;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuFileExit;
    private javax.swing.JMenuItem menuFileNew;
    private javax.swing.JMenuItem menuFileOpen;
    private javax.swing.JMenuItem menuFilePrint;
    private javax.swing.JMenuItem menuFileSave;
    private javax.swing.JMenuItem menuFileSaveAs;
    private javax.swing.JPopupMenu.Separator menuFileSeparator1;
    private javax.swing.JPopupMenu.Separator menuFileSeparator2;
    private javax.swing.JMenuItem menuFileSettings;
    private javax.swing.JMenuItem menuFileWindow;
    private javax.swing.JMenuItem menuFont;
    private javax.swing.JMenu menuFormat;
    private javax.swing.JMenu menuHelp;
    private javax.swing.JMenu menuView;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
